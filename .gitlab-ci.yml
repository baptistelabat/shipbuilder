stages:
    - build
    - babel
    - deploy

build-elm:
    stage: build
    script:
     - make
    artifacts:
      paths:
        - shipBuilder/index.html
        - shipBuilder/css
        - shipBuilder/assets
        - shipBuilder/js

build-babel:
    stage: build
    script:
    - cd babel && make

build-json:
    stage: build
    script:
    - cd buildHull && make
    artifacts:
      paths:
        - buildHull/anthineas.json
        - buildHull/OPV.json
        - buildHull/KCS.json
        - buildHull/DTMB_5415.json

build-js:
    stage: build
    script:
    - cd rebuildHull && make
    artifacts:
      paths:
        - rebuildHull/js/hull.js

babel:
    stage: babel
    dependencies:
    - build-elm
    - build-json
    script:
    - docker run -t --rm -v `pwd`:/work -w /work -u $(id -u):$(id -g) babel
    - mv shipBuilder/js/main.babel.js shipBuilder/js/main.js
    - mv shipBuilder/js/lib/TransformControls.babel.js shipBuilder/js/lib/TransformControls.js
    - mv buildHull/*.json shipBuilder/assets
    artifacts:
      paths:
        - shipBuilder/index.html
        - shipBuilder/css
        - shipBuilder/assets
        - shipBuilder/js

pages:
  stage: deploy
  dependencies:
     - babel
  script:
       - mv shipBuilder/ public/
  artifacts:
        when: on_success
        paths:
        - public
  only:
      - master
